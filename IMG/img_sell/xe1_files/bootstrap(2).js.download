var V = Object.defineProperty;
var J = (s, t, e) => t in s ? V(s, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : s[t] = e;
var v = (s, t, e) => J(s, typeof t != "symbol" ? t + "" : t, e);
import { storage as O, getComponentRegistryConfig as Q, getQueryParameter as W, STAGES as P, consola as _, BrowserReporter as k, isDebuggerGrouped as Y, isDebuggerEnable as q, isLocalhost as K, getAemConfig as Z, createHttpClient as ee, LOG_LEVEL as l, getConnectionDispatchers as j, getConnectionState as U, CONNECTIONS as I, isSeamlessConnectionAvailable as se } from "@b2x/core/bundle";
import { SeamlessConnection as $, initializeStore as R } from "@seamless/store";
import { B as f, P as y, Q as te, a as x } from "./chunks/enums-FXfIG1WS.js";
import { a as C, L as a, U as N, b as F, P as S, A as h, E as A } from "./chunks/index-DTZDs4i3.js";
import { getJwe as ie, isOnBehalfModeActive as L, getIdentityProvider as ne, IdentityProvider as w, isLoggedIn as oe, getClaims as re } from "@b2x/authentication-library";
/**
 * @preserve
 * Licenses of bundled dependencies can be found in dependencies-licenses.txt
 */
/*! B2X@LIBRARY 2.105.1 */
const le = {
  get emhContextConfig() {
    return (async () => {
      var t, e;
      const [s] = await Q((i) => [i.find((n) => {
        var o;
        return (o = n.payload) == null ? void 0 : o.userContextType;
      })]);
      return {
        source: y.PAGE,
        businessType: (t = s == null ? void 0 : s.payload) != null && t.forceUserContextType && ((e = s.payload) == null ? void 0 : e.userContextType.toUpperCase()) || null,
        profileId: null
      };
    })();
  },
  get urlPathAvailable() {
    return (async () => {
      var o, r, u;
      let s = null, t = null;
      const e = location.href.includes("/my-area"), i = location.href.includes("/my-area/business");
      return ["/profile-overview", "/my-wishlist", "/logout-successful"].some((p) => location.href.includes(p)) ? s = null : i ? (s = f.B2B, t = ((u = (r = (o = O.session.get("swsp:B2X_ACTIVE_PROFILE")) == null ? void 0 : o.company) == null ? void 0 : r.domainRef) == null ? void 0 : u.meId) || null) : e && (s = f.B2C), {
        source: y.PAGE,
        businessType: s,
        profileId: t
      };
    })();
  },
  get ctxAvailable() {
    return (async () => {
      let s = W(te.CTX);
      return s && (s = s.toUpperCase()), {
        source: y.URL,
        businessType: s,
        profileId: null
      };
    })();
  },
  get localAvailable() {
    return (async () => {
      const { businessType: s, profileId: t = null } = O.local.get(C) || {};
      return {
        source: y.PERSISTED,
        businessType: s,
        profileId: t
        // remember last used company profile
      };
    })();
  }
}, ae = [f.B2B, f.B2C];
async function ce() {
  const { profileId: s = null } = O.local.get(C) || {}, t = {
    source: y.PERSISTED,
    businessType: f.B2C,
    profileId: s
  };
  for await (const e of Object.values(le))
    if (e.businessType && ae.includes(e.businessType)) {
      const { source: i, businessType: n, profileId: o } = e;
      return t.businessType = n, t.source = i, o && (t.profileId = o), t;
    }
  return t;
}
const D = "https://dev.api.oneweb.mercedes-benz.com/profile-bff", B = "https://int.api.oneweb.mercedes-benz.com/profile-bff", ue = "https://api.oneweb.mercedes-benz.com/profile-bff", fe = {
  envs: /* @__PURE__ */ new Map([
    [P.LOCAL, D],
    [P.DEVELOP, D],
    [P.TEST, B],
    [P.INT, B],
    [P.PPROD, B],
    [P.PROD, ue]
  ])
}, z = "2.105.1", H = "15.8.2024, 13:46:26", b = "B2X@PL";
function pe() {
  return _.setLogger(b, {
    reporters: [
      new k({
        title: `PL@${z}-${H}`,
        namespace: b,
        delay: 1500,
        grouped: Y(b),
        enabled: q(b) || K()
      })
    ]
  }), _.getLogger(b);
}
const c = pe();
async function X(s) {
  const { country: t = "DE", stage: e = P.PROD } = await Z(), i = ie(s), n = L(s);
  return await de({
    country: t,
    jwe: i,
    stage: e,
    impersonation: n
  });
}
async function de(s) {
  const { country: t, jwe: e, stage: i = P.PROD, impersonation: n } = s, o = fe.envs.get(i.toLowerCase()), r = {
    ...e && { Authorization: `Bearer ${e}` },
    "x-impersonation": `${n}`,
    "x-tracking-id": crypto.randomUUID()
  };
  return ee({ prefixUrl: o }).get(`profile/${t}`, {
    headers: r
  }).then(async (p) => [null, await p.json()]).catch((p) => (c("Error fetching profiles", {
    args: [p],
    group: a.PROFILE,
    level: l.ERROR
  }), [p, []]));
}
async function M(s) {
  const { setContext: t = null } = await j(N);
  t && (c("Dispatch UCMC sync", {
    args: [s],
    group: a.UCMC_CONNECTION,
    level: l.INFO
  }), t(s));
}
function E(s, t) {
  const { businessType: e, profileId: i } = s, n = t.at(0);
  return n.id ? e === f.B2C ? t.find((o) => o.businessType === f.B2C) ?? n : ge(t, i) ?? n : n;
}
function ge(s, t) {
  if (t) {
    const e = s.find((n) => n.id === t);
    if (e)
      return e;
    const i = s.find((n) => n.meId === t);
    if (i)
      return i;
  }
  return s.find((e) => e.businessType === f.B2B);
}
class Pe extends $ {
  constructor(e) {
    super(N);
    v(this, "dispatcher");
    v(this, "initialState");
    this.initialState = this.createUCMCStateFromBusinessType(e);
  }
  createUCMCStateFromBusinessType(e) {
    return {
      context: e,
      customerGroup: e === f.B2B ? x.B2B_DEFAULT : x.B2C_DEFAULT,
      default: !1,
      lastSelectedCompanyProfileId: void 0
    };
  }
  getReducer() {
    return (e, i) => {
      switch (i.type) {
        case this.getActionType(F):
          return i.payload;
        default:
          return e;
      }
    };
  }
  getPublicDispatchers() {
    return {
      // setContext is a dispatcher that is called from the UCMC component.
      // once SDS is removed from UCMC, this dispatcher can be renamed to anything.
      setContext: (e) => (i, n) => this.setStateAction({ dispatch: i, getState: n, businessType: e })
    };
  }
  setStateAction(e) {
    const { dispatch: i, getState: n, businessType: o } = e, r = n()[N], u = (o == null ? void 0 : o.context) || o;
    c("Set state action: businessType, old state", {
      args: [o, r],
      group: a.UCMC_CONNECTION,
      level: l.INFO
    }), i(this.getAction(F, this.createUCMCStateFromBusinessType(u)));
  }
}
const Te = (...s) => {
};
class ye extends $ {
  constructor(e) {
    super(S);
    v(this, "defaultState");
    this.initialState = e, R().addConnection(new Pe(e.activeProfile.businessType));
  }
  get initialState() {
    return Object.seal({ ...this.defaultState });
  }
  set initialState(e) {
    this.defaultState = { ...e }, this.persist(e);
  }
  getReducer() {
    return (e, i) => {
      switch (i.type) {
        case this.getActionType(h):
          return { ...e, ...i.payload };
        default:
          return e;
      }
    };
  }
  getPublicDispatchers() {
    return {
      /** @deprecated, use "setActiveProfile" instead. This one is used only by UCMC */
      setBusinessType: (e) => (i, n) => {
        this.setContextAction({ dispatch: i, getState: n, options: e });
      },
      setActiveProfile: (e) => (i, n) => {
        this.setContextAction({ dispatch: i, getState: n, options: e });
      },
      setRefetchProfiles: (e, i = Te) => async (n) => {
        const { businessType: o, meId: r = null, source: u = y.PAL } = e, p = await U(I.AUTH_CONNECTION_NAME), [d, T] = await X(p);
        let g = A, m = [A];
        d || (g = E({ businessType: o, profileId: r, source: u }, T), m = T), n(
          this.getAction(h, {
            activeProfile: g,
            availableProfiles: m,
            source: u
          })
        ), n(() => i(d ?? void 0)), c("Refetch Profiles", {
          args: [e, d, g, m],
          level: l.WARN,
          group: a.CONNECTION
        });
      },
      setStateProfile: (e) => (i) => {
        const { activeProfile: n, availableProfiles: o, source: r } = e;
        i(this.getAction(h, { activeProfile: n, availableProfiles: o, source: r })), i(() => M(n.businessType));
      }
    };
  }
  async onStateChange(e) {
    return c("Profile state changed and persisted", {
      args: [e],
      level: l.WARN,
      group: a.CONNECTION
    }), this.persist(e), Promise.resolve();
  }
  async persist(e) {
    const { jwe: i = null } = await U(I.AUTH_CONNECTION_NAME), { profileId: n = null } = O.local.get(C, { profileId: null }), o = {
      businessType: e.activeProfile.businessType,
      profileId: i && e.activeProfile.businessType === f.B2B ? e.activeProfile.id : n
    }, r = Object.assign(
      /* @__PURE__ */ Object.create(null),
      JSON.parse(JSON.stringify(o))
    );
    O.local.set(C, r), O.session.set(C, e);
  }
  setContextAction(e) {
    const { dispatch: i, getState: n, options: o } = e, { source: r = y.USER, businessType: u, profileID: p = null } = o, { B2XCORE_PROFILE: d } = n(), T = E(
      { businessType: u, profileId: p },
      d.availableProfiles
    );
    c("Context changed:", {
      args: [
        `Source: ${r} |`,
        `New: ${T.businessType} |`,
        `Old: ${d == null ? void 0 : d.activeProfile.businessType}`
      ],
      group: a.CONNECTION,
      level: l.INFO
    }), i(
      this.getAction(h, {
        activeProfile: T,
        availableProfiles: d.availableProfiles,
        source: r
      })
    ), i(() => M(T.businessType));
  }
}
async function Oe(s, t, e) {
  const i = ne(s), [n, o] = Ce(s, t) ? await X(s) : await Promise.resolve([null, t.availableProfiles]);
  if (n)
    return A.businessType = e.businessType, [A];
  if (i === w.BIAS && !L(s) && oe(s)) {
    const r = re(s), { given_name: u = "", family_name: p = "" } = r || {}, d = `${u} ${p}`.trim();
    return o.map((g) => (g.businessType === f.B2C && (g.displayName = d), g)).filter((g) => g.businessType !== f.B2B);
  }
  return o;
}
function Ce(s, t) {
  const i = [
    "my-area/my-settings",
    "my-area/business/create-company",
    "my-area/business/company-dashboard",
    "my-area/business/company-profile"
  ].find((u) => document.referrer.includes(u)), n = t.availableProfiles.find((u) => u.businessType === f.B2C), o = !!(n != null && n.meId), r = !!(n != null && n.displayName);
  if (t.activeProfile.businessType === "B2E")
    return c("Profiles will be fetched: ", {
      args: ["Reason:", "Business type is B2E which no longer exists."],
      group: a.BOOTSTRAP,
      level: l.INFO
    }), !0;
  if (!t.availableProfiles)
    return c("Profiles will be fetched: ", {
      args: ["Reason:", "There are no profiles in the session"],
      group: a.BOOTSTRAP,
      level: l.INFO
    }), !0;
  if (!t.activeProfile.id)
    return c("Profiles will be fetched: ", {
      args: ["Reason:", "PL is in error state"],
      group: a.BOOTSTRAP,
      level: l.INFO
    }), !0;
  if (i)
    return c("Profiles will be fetched: ", {
      args: ["Reason:", "User was on a page that could lead to profile change"],
      group: a.BOOTSTRAP,
      level: l.INFO
    }), !0;
  if (!s.jwe && (r || o))
    return c("Profiles will be fetched: ", {
      args: ["Reason:", "User logged out, but PL still has their profile in the session."],
      group: a.BOOTSTRAP,
      level: l.INFO
    }), !0;
  switch (s.identityProvider) {
    case w.CIAS:
      return be(s, o);
    case w.BIAS:
      return ve(s, o, r);
    default:
      return !1;
  }
}
function be(s, t) {
  return s.jwe && !t ? (c("Profiles will be fetched: ", {
    args: ["Reason:", "User logged in, but PL does not have their profiles in the session."],
    group: a.BOOTSTRAP,
    level: l.INFO
  }), !0) : !1;
}
function ve(s, t, e) {
  const i = L(s);
  return i && !t ? (c("Profiles will be fetched: ", {
    args: ["Reason:", "Sales expert starts an on-behalf session"],
    group: a.BOOTSTRAP,
    level: l.INFO
  }), !0) : !i && t ? (c("Profiles will be fetched: ", {
    args: ["Reason:", "Sales expert stops an on-behalf session"],
    group: a.BOOTSTRAP,
    level: l.INFO
  }), !0) : s.jwe && !e ? (c("Profiles will be fetched: ", {
    args: ["Reason:", "User logged in, but PL does not have their SEM profile in the session."],
    group: a.BOOTSTRAP,
    level: l.INFO
  }), !0) : !1;
}
async function G(s) {
  const t = R(), e = O.session.get(C, {
    activeProfile: {},
    availableProfiles: []
  });
  c("Initialize Profile Connection", {
    args: [!!s.jwe, s.identityProvider],
    group: a.BOOTSTRAP,
    level: l.LOG
  });
  const i = await ce();
  c("Resolved business context", {
    args: [i],
    group: a.BOOTSTRAP,
    level: l.INFO
  });
  const n = await Oe(s, e, i), o = E(i, n);
  c("Resolved Active and Available Profiles", {
    args: [o, n],
    group: a.BOOTSTRAP,
    level: l.INFO
  });
  const r = {
    availableProfiles: n,
    activeProfile: o,
    source: i.source
  };
  await se(S, 1) ? (await j(S)).setStateProfile(r) : await t.addConnection(new ye(r));
}
window.GLOBAL_PL_AVAILABLE = !0;
async function he() {
  c(`Profile library ${z} - ${H}`, {
    args: [],
    group: a.BOOTSTRAP,
    level: l.INFO
  });
  const s = R();
  await new Promise((t) => {
    const e = setTimeout(async () => {
      c("Unable to retrieve auth connection on expected time", {
        args: [],
        group: a.BOOTSTRAP,
        level: l.WARN
      }), await G({
        jwe: null,
        claims: null,
        identityProvider: "",
        isPending: !1
      }), t(null);
    }, 3e4), i = s.subscribe(I.AUTH_CONNECTION_NAME, async (o) => {
      o.isPending || (t(await G(o)), clearTimeout(e));
    }), n = () => {
      i.unsubscribe(), c("Resetting subscriptions", {
        args: [],
        group: a.BOOTSTRAP,
        level: l.LOG
      });
    };
    window.addEventListener("pagehide", n), window.addEventListener("visibilitychange", n);
  });
}
he();
