import { getConnectionDispatchers as T, consola as d, BrowserReporter as b, isDebuggerGrouped as m, isDebuggerEnable as C, isLocalhost as I, CONNECTIONS as u, LOG_LEVEL as i, getComponentRegistryConfig as f, useTranslations as A, getConnectionState as y, loadTranslation as L } from "@b2x/core/bundle";
import { initializeStore as p } from "@seamless/store";
import { isLoggedIn as h } from "@b2x/authentication-library";
/**
 * @preserve
 * Licenses of bundled dependencies can be found in dependencies-licenses.txt
 */
/*! B2XCORE - OneHeaderIntegrator v0.5.4 */
const w = (e) => {
  window.addEventListener("pagehide", () => {
    e.unsubscribe();
  }), window.addEventListener("unload", () => {
    e.unsubscribe();
  });
}, N = async (e) => {
  const n = await T(e, 3e4);
  if (Object.keys(n).length === 0)
    throw new Error(`No ${e} dispatchers found`);
  return n;
}, O = "0.5.4", E = "29.8.2024, 17:54:56", a = "B2X@OHI";
function v() {
  return d.setLogger(a, {
    reporters: [
      new b({
        title: `OHI@${O}-${E}`,
        namespace: a,
        delay: 1500,
        grouped: m(a),
        enabled: C(a) || I()
      })
    ]
  }), d.getLogger(a);
}
const c = v(), g = {
  BOOTSTRAP: "Bootstrap",
  CONNECTIONS: "Connections",
  NAVIGATION_ITEM: "Navigation Item",
  ALERT_USER_MENU: "Alert User Menu"
}, _ = async () => {
  const { alert: e } = await N(u.AUTH_CONNECTION_NAME);
  e(() => {
    document.dispatchEvent(
      new CustomEvent("hp-header:open-specific-flyout", {
        detail: {
          name: "iam-user-menu-v3"
        }
      })
    ), c("An alert was found. Opening the user menu", {
      args: [],
      group: g.ALERT_USER_MENU,
      level: i.INFO
    });
  });
}, R = async () => {
  var n;
  const [e] = await f((s) => {
    const r = s.find((t) => {
      var o;
      return (o = t == null ? void 0 : t.payload) == null ? void 0 : o.userProfileAria;
    });
    return r ? [r] : [];
  });
  return ((n = e == null ? void 0 : e.payload) == null ? void 0 : n.loginLabel) || "Login";
}, U = (e, n, s) => {
  const { t: r } = A();
  let t = e.displayName ?? "", o = "";
  return n ? e.businessType === "B2C" ? (s = t, o = r("profile.context.private.registered")) : t ? (s = t, t = t.charAt(0), o = r("profile.context.company.registered")) : s = r("profile.context.company.registered") : e.businessType === "B2C" ? o = r("profile.context.private.guest") : o = r("profile.context.company.guest"), [
    {
      name: "iam-user-menu-v3",
      label: s,
      subLabel: o,
      avatar: {
        fullName: t,
        icon: e.businessType === "B2B" ? "company/24" : "bds/user/24"
      }
    }
  ];
}, M = () => {
  const n = p().subscribe(u.PROFILE_CONNECTION_NAME, async (s) => {
    const r = await y(u.AUTH_CONNECTION_NAME), t = await N("HP_HEADER_CONNECTION"), o = await R(), l = U(s.activeProfile, h(r), o);
    t.setNavigationItemsConfiguration(l), c("Update OneHeader navigation item with", {
      args: [l],
      group: g.NAVIGATION_ITEM,
      level: i.INFO
    });
  });
  w(n);
};
async function S() {
  await L("a6b17e3617922fdb78965d810593d828");
  const e = p();
  c(`One Header Integrator ${O} - ${E}`, {
    args: [],
    group: g.BOOTSTRAP,
    level: i.INFO
  });
  const n = e.subscribe("HP_HEADER_CONNECTION", async () => {
    try {
      M(), await _();
    } catch (s) {
      c("Error while integrating OneHeader with User Menu", {
        args: [s],
        group: g.BOOTSTRAP,
        level: i.WARN
      });
    }
    n.unsubscribe();
  });
}
S();
//# sourceMappingURL=bootstrap.js.map
